import cv2
import numpy as np

# Load the pre-trained YOLO model
net = cv2.dnn.readNet("yolov3.weights", "yolov3.cfg")

# Load the class labels
classes = []
with open("C:/Users/HP/Desktop/synchronization/darknet/data/coco.names", "r") as f:
    classes = [line.strip() for line in f.readlines()]

# Set up the webcam
cap = cv2.VideoCapture(0)
# cap = cv2.VideoCapture("C:/Users/HP/Desktop/synchronization/1.mp4")

# Define the object coordinates dictionary
object_coords = {}

while True:
    # Read the frame from the webcam
    ret, frame = cap.read()

    # Convert the frame to a blob
    blob = cv2.dnn.blobFromImage(frame, 1/255, (416, 416), swapRB=True)

    # Set the input to the model
    net.setInput(blob)

    # Forward pass through the model
    output_layers = net.getUnconnectedOutLayersNames()
    layer_outputs = net.forward(output_layers)

    # Extract the bounding boxes, confidences, and class IDs
    boxes = []
    confidences = []
    class_ids = []
    for output in layer_outputs:
        for detection in output:
            scores = detection[5:]
            class_id = np.argmax(scores)
            confidence = scores[class_id]
            if confidence > 0.5:
                center_x = int(detection[0] * frame.shape[1])
                center_y = int(detection[1] * frame.shape[0])
                w = int(detection[2] * frame.shape[1])
                h = int(detection[3] * frame.shape[0])
                x = int(center_x - w/2)
                y = int(center_y - h/2)


                # label = classes[class_id]
                boxes.append([x, y, w, h])
                confidences.append(float(confidence))
                class_ids.append(class_id)
                
                # Store the object coordinates
                # object_coords[label] = (center_x, center_y)

    # Apply non-maximum suppression to remove overlapping bounding boxes
    indices = cv2.dnn.NMSBoxes(boxes, confidences, 0.5, 0.4)

    # Draw the bounding boxes and class labels on the frame
    for i in indices:
        # i = i[0]
        x, y, w, h = boxes[i]
        label = classes[class_ids[i]]
        cv2.rectangle(frame, (x, y), (x+w, y+h), (0, 255, 0), 2)
        cv2.putText(frame, label, (x, y-10), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 255, 0), 2)

        # Add object coordinates to dictionary
        if label not in object_coords:
            object_coords[label] = {"coords": (x, y)}
        else:
            object_coords[label]["coords"] = (x, y)

    
    # Display the frame
    cv2.imshow("Object Detection", frame)

    # print(boxes)
    # print(confidences)
    # print(class_ids)

    # Press 'q' to quit
    if cv2.waitKey(1) == ord('q'):
        break

# Release the resources
cap.release()
cv2.destroyAllWindows()